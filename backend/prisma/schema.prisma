generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Kullanıcı Modeli (Admin, Kasiyer, Yönetici)
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("CASHIER")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sales          Sale[]
  stockMovements StockMovement[]
  expenses       Expense[]
  activityLogs   ActivityLog[]
  conversations  Conversation[]
  scheduledTasks ScheduledTask[]
  
  @@map("users")
}

// Kategori Modeli
model Category {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  products  Product[]
  
  @@map("categories")
}

// Ürün Modeli
model Product {
  id          String    @id @default(uuid())
  barcode     String    @unique
  name        String
  description String?
  price       Float
  cost        Float     @default(0)
  stock       Int       @default(0)
  unit        String    @default("Adet")
  taxRate     Float     @default(18)
  minStock    Int       @default(5)
  imageUrl    String?
  categoryId  String?
  isActive    Boolean   @default(true)
  isFavorite  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  category          Category?    @relation(fields: [categoryId], references: [id])
  saleItems         SaleItem[]
  purchaseOrderItems PurchaseOrderItem[]
  stockMovements    StockMovement[]
  priceChanges      PriceChange[]
  
  @@map("products")
}

// Müşteri Modeli
model Customer {
  id        String   @id @default(uuid())
  name      String
  email     String?  @unique
  phone     String?
  address   String?
  debt      Float    @default(0)
  credit    Float    @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  sales     Sale[]
  
  @@map("customers")
}

// Satış Modeli
model Sale {
  id            String       @id @default(uuid())
  saleNumber    String       @unique
  totalAmount   Float
  discountAmount Float       @default(0)
  taxAmount     Float        @default(0)
  netAmount     Float
  paymentMethod String       @default("CASH")
  isPaid        Boolean      @default(true)
  notes         String?
  userId        String
  customerId    String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  user          User         @relation(fields: [userId], references: [id])
  customer      Customer?    @relation(fields: [customerId], references: [id])
  saleItems     SaleItem[]
  
  @@map("sales")
}

// Satış Detay Modeli
model SaleItem {
  id        String   @id @default(uuid())
  quantity  Int
  unitPrice Float
  taxRate   Float
  total     Float
  saleId    String
  productId String
  createdAt DateTime @default(now())
  
  sale      Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
  
  @@map("sale_items")
}

// Market Ayarları
model Settings {
  id           String   @id @default(uuid())
  storeName    String   @default("Market")
  storeAddress String?
  storePhone   String?
  storeEmail   String?
  storeTax     String?
  logoUrl      String?
  currency     String   @default("TL")
  theme        String   @default("light")
  receiptFooter String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@map("settings")
}

// Tedarikçi Modeli
model Supplier {
  id              String   @id @default(uuid())
  name            String
  contactPerson   String?
  email           String?  @unique
  phone           String?
  address         String?
  taxNumber       String?
  paymentTerms    String?  // "30 gün", "Peşin" vb
  balance         Float    @default(0) // Bakiye (borç)
  isActive        Boolean  @default(true)
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  purchaseOrders  PurchaseOrder[]
  payments        SupplierPayment[]
  
  @@map("suppliers")
}

// Satın Alma Siparişi
model PurchaseOrder {
  id              String   @id @default(uuid())
  orderNumber     String   @unique
  supplierId      String
  totalAmount     Float
  paidAmount      Float    @default(0)
  status          String   @default("PENDING") // PENDING, APPROVED, RECEIVED, CANCELLED
  orderDate       DateTime @default(now())
  expectedDate    DateTime?
  receivedDate    DateTime?
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  supplier        Supplier @relation(fields: [supplierId], references: [id])
  items           PurchaseOrderItem[]
  
  @@map("purchase_orders")
}

// Satın Alma Sipariş Detayı
model PurchaseOrderItem {
  id              String   @id @default(uuid())
  purchaseOrderId String
  productId       String
  quantity        Int
  unitCost        Float
  total           Float
  receivedQty     Int      @default(0)
  createdAt       DateTime @default(now())
  
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  product         Product  @relation(fields: [productId], references: [id])
  
  @@map("purchase_order_items")
}

// Tedarikçi Ödemeleri
model SupplierPayment {
  id              String   @id @default(uuid())
  supplierId      String
  amount          Float
  paymentMethod   String   @default("CASH")
  paymentDate     DateTime @default(now())
  notes           String?
  createdAt       DateTime @default(now())
  
  supplier        Supplier @relation(fields: [supplierId], references: [id])
  
  @@map("supplier_payments")
}

// Stok Hareketleri
model StockMovement {
  id              String   @id @default(uuid())
  productId       String
  type            String   // IN (giriş), OUT (çıkış), TRANSFER, ADJUSTMENT
  quantity        Int
  previousStock   Int
  newStock        Int
  referenceType   String?  // SALE, PURCHASE, TRANSFER, ADJUSTMENT
  referenceId     String?
  notes           String?
  userId          String?
  branchId        String?
  createdAt       DateTime @default(now())
  
  product         Product  @relation(fields: [productId], references: [id])
  user            User?    @relation(fields: [userId], references: [id])
  branch          Branch?  @relation(fields: [branchId], references: [id])
  
  @@map("stock_movements")
}

// Gider Kategorileri
model ExpenseCategory {
  id              String   @id @default(uuid())
  name            String
  description     String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  expenses        Expense[]
  
  @@map("expense_categories")
}

// Giderler
model Expense {
  id              String   @id @default(uuid())
  categoryId      String
  amount          Float
  description     String
  paymentMethod   String   @default("CASH")
  expenseDate     DateTime @default(now())
  receiptNumber   String?
  userId          String
  branchId        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  category        ExpenseCategory @relation(fields: [categoryId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
  branch          Branch?  @relation(fields: [branchId], references: [id])
  
  @@map("expenses")
}

// Kampanyalar
model Campaign {
  id              String   @id @default(uuid())
  name            String
  description     String?
  type            String   // DISCOUNT, BUY_X_GET_Y, COMBO, COUPON
  discountType    String?  // PERCENTAGE, FIXED
  discountValue   Float?
  startDate       DateTime
  endDate         DateTime
  minPurchase     Float?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  coupons         Coupon[]
  
  @@map("campaigns")
}

// Kuponlar
model Coupon {
  id              String   @id @default(uuid())
  code            String   @unique
  campaignId      String?
  discountType    String   // PERCENTAGE, FIXED
  discountValue   Float
  maxUses         Int?
  usedCount       Int      @default(0)
  minPurchase     Float?
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  campaign        Campaign? @relation(fields: [campaignId], references: [id])
  
  @@map("coupons")
}

// Şubeler
model Branch {
  id              String   @id @default(uuid())
  name            String
  address         String?
  phone           String?
  email           String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  stockMovements  StockMovement[]
  expenses        Expense[]
  activityLogs    ActivityLog[]
  
  @@map("branches")
}

// Aktivite Logları
model ActivityLog {
  id              String   @id @default(uuid())
  userId          String?
  action          String   // CREATE, UPDATE, DELETE, LOGIN, LOGOUT
  module          String   // USER, PRODUCT, SALE, etc.
  description     String
  ipAddress       String?
  userAgent       String?
  branchId        String?
  createdAt       DateTime @default(now())
  
  user            User?    @relation(fields: [userId], references: [id])
  branch          Branch?  @relation(fields: [branchId], references: [id])
  
  @@map("activity_logs")
}

// Fiyat Değişiklik Takibi
model PriceChange {
  id              String   @id @default(uuid())
  productId       String
  source          String   // BENIMPOS, MANUAL, API
  oldPrice        Float
  newPrice        Float
  difference      Float
  percentage      Float
  status          String   @default("PENDING") // PENDING, APPLIED, IGNORED
  scrapedData     Json?    // Ek bilgiler (stok, kampanya vs)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  product         Product  @relation(fields: [productId], references: [id])
  
  @@map("price_changes")
}

// Scraper Ayarları
model ScraperConfig {
  id              String   @id @default(uuid())
  source          String   @unique // BENIMPOS
  email           String
  password        String   // Encrypted
  isActive        Boolean  @default(true)
  cronSchedule    String   @default("0 9 * * *") // Her gün 09:00
  lastRun         DateTime?
  lastStatus      String?  // SUCCESS, ERROR
  errorMessage    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("scraper_configs")
}

// AI Sohbet Geçmişi
model Conversation {
  id            String   @id @default(uuid())
  userId        String
  userMessage   String   @db.Text
  aiResponse    String   @db.Text
  actionType    String?  // NAVIGATE, CATEGORY_MOVE, UPDATE_PRICES, etc.
  actionData    Json?    // Action parameters
  actionResult  String?  @db.Text
  conversationSession String? // Session ID to group related messages
  metadata      Json?    // Extra data (response time, tokens used, etc.)
  createdAt     DateTime @default(now())
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([conversationSession])
  @@index([createdAt])
  @@map("conversations")
}

// Zamanlı Görevler (Scheduled Tasks)
model ScheduledTask {
  id            String   @id @default(uuid())
  userId        String
  name          String
  description   String?
  actionType    String   // STOCK_ALERT, CUSTOMER_REMINDER, REPORT_GENERATION, etc.
  actionData    Json     // Task parameters
  schedule      String   // Cron expression: "0 9 * * *"
  isActive      Boolean  @default(true)
  lastRun       DateTime?
  lastStatus    String?  // SUCCESS, ERROR, SKIPPED
  lastError     String?  @db.Text
  nextRun       DateTime?
  runCount      Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([isActive])
  @@index([nextRun])
  @@map("scheduled_tasks")
}

