generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// CORE MODELS
// ============================================

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("CASHIER") // SUPER_ADMIN, ADMIN, MANAGER, CASHIER
  isSuperAdmin Boolean @default(false)
  tenantId  String?
  trialEndsAt DateTime?
  branchId  String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  branch              Branch?           @relation(fields: [branchId], references: [id])
  tenant              Tenant?           @relation(fields: [tenantId], references: [id])
  sales               Sale[]
  shifts              Shift[]
  stockMovements      StockMovement[]
  expenses            Expense[]
  activityLogs        ActivityLog[]
  conversations       Conversation[]
  scheduledTasks      ScheduledTask[]
  stockCounts         StockCount[]
  stockTransfers      StockTransfer[]
  cashTransactions    CashTransaction[]
  returns             Return[]
  customerTransactions CustomerTransaction[] @relation("CustomerTransactions")
  customerDebts       CustomerDebt[]        @relation("CustomerDebts")
  debtPayments        DebtPayment[]         @relation("DebtPayments")
  customerNotes       CustomerNote[]        @relation("CustomerNotes")
  customerDocuments   CustomerDocument[]    @relation("CustomerDocuments")
  
  @@map("users")
}

model Branch {
  id        String   @id @default(uuid())
  name      String
  address   String?
  phone     String?
  email     String?
  timezone  String   @default("Europe/Istanbul")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  users              User[]
  stockMovements     StockMovement[]
  expenses           Expense[]
  activityLogs       ActivityLog[]
  stockCounts        StockCount[]
  stockTransfersFrom StockTransfer[]     @relation("TransfersFrom")
  stockTransfersTo   StockTransfer[]     @relation("TransfersTo")
  shifts             Shift[]
  
  @@map("branches")
}

// ============================================
// PRODUCT MODELS
// ============================================

model Category {
  id        String    @id @default(uuid())
  name      String
  parentId  String?
  imageUrl  String?
  sortOrder Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]
  
  @@map("categories")
}

model Product {
  id          String    @id @default(uuid())
  tenantId    String?
  sku         String?   @unique
  barcode     String    @unique
  name        String
  description String?
  buyPrice    Float     @default(0) // Maliyet
  sellPrice   Float     @default(0) // Satış fiyatı
  stock       Int       @default(0)
  minStock    Int       @default(5)
  maxStock    Int?
  unit        String    @default("Adet")
  taxRate     Float     @default(18)
  imageUrl    String?
  categoryId  String?
  supplierId  String?
  isFavorite  Boolean   @default(false)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  category             Category?              @relation(fields: [categoryId], references: [id])
  supplier             Supplier?              @relation(fields: [supplierId], references: [id])
  tenant               Tenant?                @relation(fields: [tenantId], references: [id])
  variants             ProductVariant[]
  saleItems            SaleItem[]
  purchaseOrderItems   PurchaseOrderItem[]
  stockMovements       StockMovement[]
  stockCountItems      StockCountItem[]
  stockTransferItems   StockTransferItem[]
  returnItems          ReturnItem[]
  
  @@map("products")
}

// ============================================
// MULTI-TENANCY & LICENSE MODELS
// ============================================

model Tenant {
  id           String    @id @default(uuid())
  name         String
  ownerUserId  String?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  users        User[]
  products     Product[]
  licenses     License[]
  payments     PaymentReceipt[]

  @@map("tenants")
}

model License {
  id         String   @id @default(uuid())
  tenantId   String
  status     String   @default("ACTIVE") // ACTIVE, EXPIRED, SUSPENDED
  plan       String   @default("STANDARD") // plan code
  includesMobile Boolean @default(false)
  trial       Boolean  @default(false)
  trialEndsAt DateTime?
  startsAt    DateTime @default(now())
  expiresAt   DateTime?
  notes       String?

  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("licenses")
}

model PaymentReceipt {
  id          String   @id @default(uuid())
  tenantId    String
  amount      Float
  currency    String   @default("TRY")
  bankName    String?
  iban        String?
  reference   String?  // açıklama/referans kodu
  status      String   @default("PENDING") // PENDING, APPROVED, REJECTED
  proofUrl    String?  // dekont dosyası
  notes       String?
  createdAt   DateTime @default(now())
  approvedAt  DateTime?

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("payment_receipts")
}

model ProductVariant {
  id         String   @id @default(uuid())
  productId  String
  name       String   // "Kırmızı - S", "500ml"
  sku        String   @unique
  barcode    String?  @unique
  attributes String?    // {color: "red", size: "S"}
  price      Float    // Ek fiyat veya farklı fiyat
  stock      Int      @default(0)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_variants")
}

model Supplier {
  id              String   @id @default(uuid())
  name            String
  contactPerson   String?
  email           String?  @unique
  phone           String?
  address         String?
  taxNumber       String?
  paymentTerms    String?  // "30 gün", "Peşin"
  balance         Float    @default(0)
  notes           String? 
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  products        Product[]
  purchaseOrders  PurchaseOrder[]
  payments        SupplierPayment[]
  
  @@map("suppliers")
}

// ============================================
// INVENTORY MODELS
// ============================================

model StockMovement {
  id              String   @id @default(uuid())
  productId       String
  type            String   // IN, OUT, TRANSFER, ADJUSTMENT, RETURN
  quantity        Int
  previousStock   Int
  newStock        Int
  referenceType   String?  // SALE, PURCHASE, TRANSFER, COUNT, RETURN
  referenceId     String?
  notes           String? 
  userId          String?
  branchId        String?
  createdAt       DateTime @default(now())
  
  product         Product  @relation(fields: [productId], references: [id])
  user            User?    @relation(fields: [userId], references: [id])
  branch          Branch?  @relation(fields: [branchId], references: [id])
  
  @@map("stock_movements")
}

model StockCount {
  id           String   @id @default(uuid())
  countNumber  String   @unique
  type         String   // FULL, PARTIAL, CATEGORY
  categoryId   String?
  status       String   // IN_PROGRESS, COMPLETED
  startedAt    DateTime @default(now())
  completedAt  DateTime?
  notes        String? 
  userId       String
  branchId     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  items        StockCountItem[]
  user         User     @relation(fields: [userId], references: [id])
  branch       Branch?  @relation(fields: [branchId], references: [id])
  
  @@map("stock_counts")
}

model StockCountItem {
  id             String     @id @default(uuid())
  stockCountId   String
  productId      String
  systemQty      Int        // Sistemdeki miktar
  countedQty     Int?       // Sayılan miktar
  difference     Int?       // Fark
  notes          String?
  createdAt      DateTime   @default(now())
  
  stockCount     StockCount @relation(fields: [stockCountId], references: [id], onDelete: Cascade)
  product        Product    @relation(fields: [productId], references: [id])
  
  @@map("stock_count_items")
}

model StockTransfer {
  id             String   @id @default(uuid())
  transferNumber String   @unique
  fromBranchId   String
  toBranchId     String
  status         String   // PENDING, IN_TRANSIT, RECEIVED, CANCELLED
  notes          String? 
  userId         String
  createdAt      DateTime @default(now())
  completedAt    DateTime?
  updatedAt      DateTime @updatedAt
  
  items          StockTransferItem[]
  fromBranch     Branch   @relation("TransfersFrom", fields: [fromBranchId], references: [id])
  toBranch       Branch   @relation("TransfersTo", fields: [toBranchId], references: [id])
  user           User     @relation(fields: [userId], references: [id])
  
  @@map("stock_transfers")
}

model StockTransferItem {
  id               String        @id @default(uuid())
  stockTransferId  String
  productId        String
  quantity         Int
  receivedQty      Int           @default(0)
  createdAt        DateTime      @default(now())
  
  stockTransfer    StockTransfer @relation(fields: [stockTransferId], references: [id], onDelete: Cascade)
  product          Product       @relation(fields: [productId], references: [id])
  
  @@map("stock_transfer_items")
}

model PurchaseOrder {
  id              String   @id @default(uuid())
  orderNumber     String   @unique
  supplierId      String
  totalAmount     Float
  paidAmount      Float    @default(0)
  status          String   @default("PENDING") // PENDING, APPROVED, RECEIVED, CANCELLED
  orderDate       DateTime @default(now())
  expectedDate    DateTime?
  receivedDate    DateTime?
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  supplier        Supplier @relation(fields: [supplierId], references: [id])
  items           PurchaseOrderItem[]
  
  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id              String   @id @default(uuid())
  purchaseOrderId String
  productId       String
  quantity        Int
  unitCost        Float
  total           Float
  receivedQty     Int      @default(0)
  createdAt       DateTime @default(now())
  
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  product         Product  @relation(fields: [productId], references: [id])
  
  @@map("purchase_order_items")
}

// ============================================
// CUSTOMER MODELS
// ============================================

model Customer {
  id            String   @id @default(uuid())
  name          String
  email         String?  @unique
  phone         String?
  address       String? 
  taxNumber     String?
  debt          Float    @default(0)
  loyaltyPoints Int      @default(0)
  totalSpent    Float    @default(0)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  sales           Sale[]
  invoices        Invoice[]
  customerPoints  CustomerPoints[]
  transactions    CustomerTransaction[]
  debts           CustomerDebt[]
  notes           CustomerNote[]
  documents       CustomerDocument[]
  
  @@map("customers")
}

model LoyaltyProgram {
  id                String   @id @default(uuid())
  name              String
  pointsPerAmount   Float    // Her X TL'ye kaç puan (örn: 10 TL = 1 puan)
  rewardThreshold   Int      // Ödül için gereken puan
  rewardValue       Float    // Ödül değeri (TL)
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("loyalty_programs")
}

model CustomerPoints {
  id         String   @id @default(uuid())
  customerId String
  points     Int
  type       String   // EARNED, REDEEMED, EXPIRED, ADJUSTED
  saleId     String?
  earnedDate DateTime @default(now())
  expiryDate DateTime?
  notes      String?
  
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  @@map("customer_points")
}

// ============================================
// SALES MODELS
// ============================================

model Sale {
  id             String       @id @default(uuid())
  saleNumber     String       @unique
  customerId     String?
  userId         String
  shiftId        String?
  subtotal       Float        @default(0) // Ara toplam
  discountAmount Float        @default(0)
  taxAmount      Float        @default(0)
  total          Float        @default(0) // Final toplam
  paymentMethod  String       @default("CASH") // CASH, CARD, CREDIT, MIXED
  paymentDetails String?        // Mixed payment details
  isPaid         Boolean      @default(true)
  status         String       @default("COMPLETED") // COMPLETED, VOIDED, RETURNED
  notes          String?     
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  customer       Customer?    @relation(fields: [customerId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
  shift          Shift?       @relation(fields: [shiftId], references: [id])
  items          SaleItem[]
  invoice        Invoice?
  returns        Return[]
  
  @@map("sales")
}

model SaleItem {
  id        String   @id @default(uuid())
  saleId    String
  productId String
  quantity  Int
  unitPrice Float
  taxRate   Float
  discount  Float    @default(0)
  total     Float
  createdAt DateTime @default(now())
  
  sale      Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
  
  @@map("sale_items")
}

model Return {
  id            String   @id @default(uuid())
  returnNumber  String   @unique
  saleId        String
  reason        String  
  status        String   // PENDING, APPROVED, COMPLETED, REJECTED
  refundAmount  Float
  refundMethod  String   // CASH, CARD, CREDIT
  userId        String
  notes         String? 
  createdAt     DateTime @default(now())
  completedAt   DateTime?
  updatedAt     DateTime @updatedAt
  
  sale          Sale     @relation(fields: [saleId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
  items         ReturnItem[]
  
  @@map("returns")
}

model ReturnItem {
  id         String  @id @default(uuid())
  returnId   String
  productId  String
  quantity   Int
  price      Float
  total      Float
  createdAt  DateTime @default(now())
  
  return     Return  @relation(fields: [returnId], references: [id], onDelete: Cascade)
  product    Product @relation(fields: [productId], references: [id])
  
  @@map("return_items")
}

model Invoice {
  id            String   @id @default(uuid())
  invoiceNumber String   @unique
  saleId        String   @unique
  customerId    String
  type          String   // E_INVOICE, E_ARCHIVE, STANDARD
  status        String   // DRAFT, SENT, APPROVED, CANCELLED, REJECTED
  subtotal      Float
  taxAmount     Float
  total         Float
  eInvoiceData  String?    // GİB response
  pdfUrl        String?
  xmlUrl        String?
  sentAt        DateTime?
  approvedAt    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  sale          Sale     @relation(fields: [saleId], references: [id])
  customer      Customer @relation(fields: [customerId], references: [id])
  
  @@map("invoices")
}

// ============================================
// OPERATIONS MODELS
// ============================================

model Shift {
  id            String   @id @default(uuid())
  shiftNumber   String   @unique
  userId        String
  branchId      String?
  startTime     DateTime @default(now())
  endTime       DateTime?
  startCash     Float    @default(0)
  endCash       Float?
  expectedCash  Float?
  actualCash    Float?
  difference    Float?   // actualCash - expectedCash
  status        String   // OPEN, CLOSED
  notes         String? 
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user              User              @relation(fields: [userId], references: [id])
  branch            Branch?           @relation(fields: [branchId], references: [id])
  sales             Sale[]
  cashTransactions  CashTransaction[]
  
  @@map("shifts")
}

model CashTransaction {
  id       String   @id @default(uuid())
  shiftId  String
  type     String   // IN, OUT
  amount   Float
  category String?  // SALE, EXPENSE, INITIAL, BANK_DEPOSIT, etc.
  note     String  
  userId   String
  createdAt DateTime @default(now())
  
  shift    Shift    @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id])
  
  @@map("cash_transactions")
}

// ============================================
// FINANCE MODELS
// ============================================

model ExpenseCategory {
  id          String   @id @default(uuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  expenses    Expense[]
  
  @@map("expense_categories")
}

model Expense {
  id              String   @id @default(uuid())
  categoryId      String
  amount          Float
  description     String
  paymentMethod   String   @default("CASH")
  receiptNumber   String?
  expenseDate     DateTime @default(now())
  userId          String
  branchId        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  category        ExpenseCategory @relation(fields: [categoryId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
  branch          Branch?  @relation(fields: [branchId], references: [id])
  
  @@map("expenses")
}

model SupplierPayment {
  id              String   @id @default(uuid())
  supplierId      String
  amount          Float
  paymentMethod   String   @default("CASH")
  paymentDate     DateTime @default(now())
  referenceNumber String?
  notes           String? 
  createdAt       DateTime @default(now())
  
  supplier        Supplier @relation(fields: [supplierId], references: [id])
  
  @@map("supplier_payments")
}

model TaxRate {
  id        String   @id @default(uuid())
  name      String
  rate      Float    // 0.18 for 18%
  country   String   @default("TR")
  isDefault Boolean  @default(false)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("tax_rates")
}

model PaymentMethod {
  id        String   @id @default(uuid())
  name      String
  type      String   // CASH, CARD, BANK_TRANSFER, MOBILE, CRYPTO
  config    String?    // Payment gateway config
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("payment_methods")
}

// ============================================
// SYSTEM MODELS
// ============================================

model Settings {
  id              String   @id @default(uuid())
  storeName       String   @default("Store")
  storeAddress    String? 
  storePhone      String?
  storeEmail      String?
  storeTaxNumber  String?
  logoUrl         String?
  currency        String   @default("TRY")
  locale          String   @default("tr-TR")
  timezone        String   @default("Europe/Istanbul")
  theme           String   @default("light")
  receiptFooter   String? 
  eInvoiceConfig  String?    // E-Invoice provider config
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("settings")
}

model ActivityLog {
  id              String   @id @default(uuid())
  userId          String?
  action          String   // CREATE, UPDATE, DELETE, LOGIN, LOGOUT
  module          String   // USER, PRODUCT, SALE, SHIFT, etc.
  entityId        String?
  description     String
  oldValue        String?
  newValue        String?
  ipAddress       String?
  userAgent       String?
  branchId        String?
  createdAt       DateTime @default(now())
  
  user            User?    @relation(fields: [userId], references: [id])
  branch          Branch?  @relation(fields: [branchId], references: [id])
  
  @@map("activity_logs")
}

// ============================================
// AI MODELS
// ============================================

model Conversation {
  id                  String   @id @default(uuid())
  userId              String
  userMessage         String  
  aiResponse          String  
  actionType          String?
  actionData          String?
  actionResult        String? 
  conversationSession String?
  metadata            String?
  createdAt           DateTime @default(now())
  
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([conversationSession])
  @@map("conversations")
}

model ScheduledTask {
  id            String   @id @default(uuid())
  userId        String
  name          String
  description   String? 
  actionType    String
  actionData    String
  schedule      String   // Cron expression
  isActive      Boolean  @default(true)
  lastRun       DateTime?
  lastStatus    String?
  lastError     String? 
  nextRun       DateTime?
  runCount      Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([isActive])
  @@index([nextRun])
  @@map("scheduled_tasks")
}

// ============================================
// CUSTOMER FINANCIAL & DOCUMENT MODELS
// ============================================

model CustomerTransaction {
  id              String   @id @default(uuid())
  customerId      String
  type            String   // SALE, DEBT, PAYMENT, REFUND
  amount          Float
  description     String?
  referenceType   String?  // Sale, Debt, Payment
  referenceId     String?
  userId          String?
  createdAt       DateTime @default(now())
  
  customer        Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  user            User?    @relation("CustomerTransactions", fields: [userId], references: [id])
  
  @@index([customerId])
  @@index([type])
  @@index([createdAt])
  @@map("customer_transactions")
}

model CustomerDebt {
  id              String    @id @default(uuid())
  customerId      String
  amount          Float
  paidAmount      Float     @default(0)
  status          String    @default("OPEN") // OPEN, PARTIAL, PAID, OVERDUE
  description     String?
  dueDate         DateTime?
  paidDate        DateTime?
  userId          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  customer        Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  user            User      @relation("CustomerDebts", fields: [userId], references: [id])
  payments        DebtPayment[]
  
  @@index([customerId])
  @@index([status])
  @@map("customer_debts")
}

model DebtPayment {
  id              String   @id @default(uuid())
  debtId          String
  amount          Float
  paymentMethod   String   // CASH, CARD, BANK_TRANSFER
  notes           String?
  userId          String
  createdAt       DateTime @default(now())
  
  debt            CustomerDebt @relation(fields: [debtId], references: [id], onDelete: Cascade)
  user            User     @relation("DebtPayments", fields: [userId], references: [id])
  
  @@index([debtId])
  @@map("debt_payments")
}

model CustomerNote {
  id              String   @id @default(uuid())
  customerId      String
  note            String
  isPinned        Boolean  @default(false)
  userId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  customer        Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  user            User     @relation("CustomerNotes", fields: [userId], references: [id])
  
  @@index([customerId])
  @@map("customer_notes")
}

model CustomerDocument {
  id              String   @id @default(uuid())
  customerId      String
  fileName        String
  fileUrl         String
  fileSize        Int
  fileType        String
  description     String?
  userId          String
  createdAt       DateTime @default(now())
  
  customer        Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  user            User     @relation("CustomerDocuments", fields: [userId], references: [id])
  
  @@index([customerId])
  @@map("customer_documents")
}
